name: Android Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  JDK_VERSION: 17
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-Xmx3072m"
  BUILD_TOOLS_VERSION: "34.0.0"
  APP_NAME: "FriendsSecrets"

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Application
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '${{ env.JDK_VERSION }}'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Cache Gradle Packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Create local.properties
        run: |
          echo "sdk.dir=${{ env.ANDROID_HOME }}" > local.properties
          echo "apiKey=${{ secrets.API_KEY }}" >> local.properties

      - name: Get Gradle Version from gradle.properties
        id: gradle-version
        run: |
          GRADLE_VERSION=$(grep "gradleVersion" gradle.properties | cut -d'=' -f2 | tr -d ' ')
          echo "gradle_version=${GRADLE_VERSION}" >> $GITHUB_ENV
          echo "Gradle version is $GRADLE_VERSION"

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.gradle_version }}

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Run Unit Tests
        run: ./gradlew testDebug
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}

      - name: Run Lint
        run: ./gradlew lintDebug
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}

      - name: Remove Previous Comments
        uses: actions/github-script@v6
        id: remove-comments
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              ...context.issue,
            });
            const commentId = comments
              .filter(comment => comment.body.includes('Ops, encontrado falhas nos testes') || comment.body.includes('Todos os testes e lint passaram com sucesso!'))
              .map(comment => comment.id);
            for (const id of commentId) {
              await github.rest.issues.deleteComment({
                ...context.issue,
                comment_id: id,
              });
            }

      - name: Comment Failure
        if: ${{ failure() }}
        uses: mb2dev/github-action-comment-pull-request@1.0.0
        with:
          message: "Ops, encontrado falhas nos testes ou lint. Por favor, precisa corrigir."
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          reactions: "-1 | confused"

      - name: Comment Success
        if: ${{ success() }}
        uses: mb2dev/github-action-comment-pull-request@1.0.0
        with:
          message: "Todos os testes e lint passaram com sucesso! Bom trabalho."
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          reactions: "+1"
