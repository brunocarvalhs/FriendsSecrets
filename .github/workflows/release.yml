name: Build and Release Application

on:
  push:
    branches: [ master ]

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    name: Build and Release Application
    env:
      KEYSTORE_ALIAS: ${{ secrets.ALIAS }}
      KEY_PASSWORD: ${{ secrets.PASSWORD_ALIAS }}
      KEYSTORE_PASSWORD: ${{ secrets.PASSWORD_KEY }}
      GITHUB_TOKEN: ${{ secrets.TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Setup Gradle
        run: echo "org.gradle.daemon=false" >> $GITHUB_WORKSPACE/gradle.properties

      - name: Create google-services release file
        run: |
          rm -f app/google-services.json
          echo ${{ secrets.GOOGLE_SERVICE_JSON }} | base64 --decode > app/google-services.json

      - name: Generate Keystore
        run: |
          keytool -genkeypair -v \
            -keystore app/release.keystore \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -alias "${{ secrets.KEYSTORE_ALIAS }}" \
            -dname "CN=My Name, OU=My Organization, O=My Company, L=My City, ST=My State, C=My Country" \
            -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
            -keypass "${{ secrets.KEY_PASSWORD }}"

      - name: Build APK
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=app/release.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEYSTORE_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: Build AAB
        run: |
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=app/release.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEYSTORE_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: Get App Version
        run: echo "version=$(cat VERSION.md)" >> $GITHUB_ENV

      - name: Calculate module name
        id: module_name
        run: |
          MODULE_NAME=$(echo "${{ github.repository }}" | awk -F'/' '{print $2}')
          echo "module_name=$MODULE_NAME" >> $GITHUB_ENV

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.module_name }}-apk
          path: app/build/outputs/apk/release/*.apk

      - name: Upload AAB Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.module_name }}-aab
          path: app/build/outputs/bundle/release/*.aab

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.version }}
          release_name: ${{ env.module_name }} v${{ env.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

      - name: Upload Release Artifacts
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: app/build/outputs/apk/release/*.apk
          asset_name: ${{ env.module_name }}-apk-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload AAB to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: app/build/outputs/bundle/release/*.aab
          asset_name: ${{ env.module_name }}-release.aab
          asset_content_type: application/octet-stream
